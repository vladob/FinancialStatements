// <auto-generated />
using System;
using FsDataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FsDataAccess.Migrations
{
    [DbContext(typeof(DboContext))]
    [Migration("20250129160937_UpdateTemplateTableAndHeader")]
    partial class UpdateTemplateTableAndHeader
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountingEntitiesAnnualReport", b =>
                {
                    b.Property<int>("AccountingEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AnnualReportId")
                        .HasColumnType("int");

                    b.HasKey("AccountingEntityId", "AnnualReportId")
                        .HasName("PK__Accounti__72B514D14DD17587");

                    b.HasIndex("AnnualReportId");

                    b.ToTable("AccountingEntities_AnnualReports", "staging");
                });

            modelBuilder.Entity("AccountingEntitiesFinancialStatement", b =>
                {
                    b.Property<int>("AccountingEntityId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialStatementId")
                        .HasColumnType("int");

                    b.HasKey("AccountingEntityId", "FinancialStatementId")
                        .HasName("PK__Accounti__54B346F8C6389670");

                    b.HasIndex("FinancialStatementId");

                    b.ToTable("AccountingEntities_FinancialStatements", "staging");
                });

            modelBuilder.Entity("FsDataAccess.Models.AccountingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Cancellation")
                        .HasColumnType("date")
                        .HasColumnName("cancellation");

                    b.Property<string>("Cin")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cin");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("city");

                    b.Property<bool?>("Consolidated")
                        .HasColumnType("bit")
                        .HasColumnName("consolidated");

                    b.Property<string>("DataSource")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("dataSource");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("districtId");

                    b.Property<string>("ErpId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateOnly?>("Established")
                        .HasColumnType("date")
                        .HasColumnName("established");

                    b.Property<DateOnly?>("LastModification")
                        .HasColumnType("date")
                        .HasColumnName("lastModification");

                    b.Property<string>("LegalFormId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("legalFormId");

                    b.Property<string>("OrganizationSizeId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("organizationSizeId");

                    b.Property<string>("OwnershipTypeId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ownershipTypeId");

                    b.Property<string>("RegionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("regionId");

                    b.Property<string>("RegisterredOfficeId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("registerredOfficeId");

                    b.Property<string>("Sid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("sid");

                    b.Property<string>("SkNaceId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("skNaceId");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("street");

                    b.Property<string>("Tin")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tin");

                    b.Property<string>("TitleAe")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("titleAE");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("PK_dbo_AccountingEntities");

                    b.ToTable("AccountingEntities", "staging");
                });

            modelBuilder.Entity("FsDataAccess.Models.AnnualReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountingEntityId")
                        .HasColumnType("int")
                        .HasColumnName("accountingEntityId");

                    b.Property<DateOnly?>("AssemblyDate")
                        .HasColumnType("date")
                        .HasColumnName("assemblyDate");

                    b.Property<string>("DataAvailability")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("dataAvailability");

                    b.Property<string>("DataSource")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("dataSource");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<string>("FundName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("fundName");

                    b.Property<DateOnly?>("LastModification")
                        .HasColumnType("date")
                        .HasColumnName("lastModification");

                    b.Property<string>("LeiCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("leiCode");

                    b.Property<string>("PeriodFrom")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("periodFrom");

                    b.Property<string>("PeriodTo")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("periodTo");

                    b.Property<DateOnly?>("SubmissionDate")
                        .HasColumnType("date")
                        .HasColumnName("submissionDate");

                    b.Property<string>("TitleAe")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("titleAE");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK_dbo_AnnualReports");

                    b.ToTable("AnnualReport");
                });

            modelBuilder.Entity("FsDataAccess.Models.AnnualReportAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnnualReportId")
                        .HasColumnType("int");

                    b.Property<string>("Digest")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("digest");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("mimeType");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("PK_dbo_AnnualReportAttachments");

                    b.HasIndex("AnnualReportId");

                    b.ToTable("AnnualReportAttachments", "staging");
                });

            modelBuilder.Entity("FsDataAccess.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Digest")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("digest");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialReportId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("language");

                    b.Property<string>("MimeType")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("mimeType");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int")
                        .HasColumnName("pageCount");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("PK_dbo_Attachments");

                    b.HasIndex("FinancialReportId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("FsDataAccess.Models.FinancialReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnnualReportId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("currency");

                    b.Property<string>("DataAvailability")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("dataAvailability");

                    b.Property<string>("DataSource")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("dataSource");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialStatementId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("LastModification")
                        .HasColumnType("date")
                        .HasColumnName("lastModification");

                    b.Property<string>("TaxOfficeCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("taxOfficeCode");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo_FinancialReports");

                    b.HasIndex("AnnualReportId");

                    b.HasIndex("FinancialStatementId");

                    b.ToTable("FinancialReport");
                });

            modelBuilder.Entity("FsDataAccess.Models.FinancialReportTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataSource")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("dataSource");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("LastModification")
                        .HasColumnType("date")
                        .HasColumnName("lastModification");

                    b.Property<string>("MfSpecification")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mfSpecification");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("ValidFrom")
                        .HasColumnType("date")
                        .HasColumnName("validFrom");

                    b.Property<DateOnly?>("ValidTo")
                        .HasColumnType("date")
                        .HasColumnName("validTo");

                    b.HasKey("Id")
                        .HasName("PK_dbo_FinancialReportTemplates");

                    b.ToTable("FinancialReportTemplate");
                });

            modelBuilder.Entity("FsDataAccess.Models.FinancialStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountingEntityId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ApprovalDate")
                        .HasColumnType("date")
                        .HasColumnName("approvalDate");

                    b.Property<DateOnly?>("AssemblyDate")
                        .HasColumnType("date")
                        .HasColumnName("assemblyDate");

                    b.Property<DateOnly?>("AuditorReportAttachmentDate")
                        .HasColumnType("date")
                        .HasColumnName("auditorReportAttachmentDate");

                    b.Property<bool?>("Consolidated")
                        .HasColumnType("bit")
                        .HasColumnName("consolidated");

                    b.Property<bool?>("ConsolidatedCentralGovernment")
                        .HasColumnType("bit")
                        .HasColumnName("consolidatedCentralGovernment");

                    b.Property<string>("DataSource")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("dataSource");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<string>("FundName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("fundName");

                    b.Property<DateOnly?>("LastModification")
                        .HasColumnType("date")
                        .HasColumnName("lastModification");

                    b.Property<string>("LeiCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("leiCode");

                    b.Property<string>("PeriodFrom")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("periodFrom");

                    b.Property<string>("PeriodTo")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("periodTo");

                    b.Property<DateOnly?>("PreparationDate")
                        .HasColumnType("date")
                        .HasColumnName("preparationDate");

                    b.Property<DateOnly?>("SubmissionDate")
                        .HasColumnType("date")
                        .HasColumnName("submissionDate");

                    b.Property<bool?>("SummaryPublicAdministration")
                        .HasColumnType("bit")
                        .HasColumnName("summaryPublicAdministration");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK_dbo_FinancialStatements");

                    b.HasIndex("AccountingEntityId");

                    b.ToTable("FinancialStatement");
                });

            modelBuilder.Entity("FsDataAccess.Models.LegalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleEng")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleSk")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK_staging_LegalForms");

                    b.ToTable("LegalForms", "staging");
                });

            modelBuilder.Entity("FsDataAccess.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParentLocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleEng")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleSk")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK_classifications_Locations");

                    b.ToTable("Locations", "staging");
                });

            modelBuilder.Entity("FsDataAccess.Models.OrganizationSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleEng")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleSk")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK_staging_OrganizationSizes");

                    b.ToTable("OrganizationSizes", "staging");
                });

            modelBuilder.Entity("FsDataAccess.Models.OwnershipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleEng")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleSk")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK_staging_OwnershipTypes");

                    b.ToTable("OwnershipTypes", "staging");
                });

            modelBuilder.Entity("FsDataAccess.Models.ReportContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ApprovalDate")
                        .HasColumnType("date")
                        .HasColumnName("approvalDate");

                    b.Property<DateOnly?>("AssemblyDate")
                        .HasColumnType("date")
                        .HasColumnName("assemblyDate");

                    b.Property<DateOnly?>("AuditorReportAttachmentDate")
                        .HasColumnType("date")
                        .HasColumnName("auditorReportAttachmentDate");

                    b.Property<string>("CommercialRegister")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("commercialRegister");

                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("completionDate");

                    b.Property<string>("CoverPageAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("coverPageAddress");

                    b.Property<bool?>("CoverPageConsolidated")
                        .HasColumnType("bit")
                        .HasColumnName("coverPageConsolidated");

                    b.Property<bool?>("CoverPageConsolidatedCg")
                        .HasColumnType("bit")
                        .HasColumnName("coverPageConsolidatedCG");

                    b.Property<string>("CoverPageDic")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("coverPageDic");

                    b.Property<string>("CoverPageIco")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("coverPageIco");

                    b.Property<string>("CoverPageLegalFormId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("coverPageLegalFormId");

                    b.Property<string>("CoverPageSid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("coverPageSid");

                    b.Property<string>("CoverPageSkNaceId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("coverPageSkNaceId");

                    b.Property<bool?>("CoverPageSummaryPa")
                        .HasColumnType("bit")
                        .HasColumnName("coverPageSummaryPA");

                    b.Property<string>("CoverPageTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("coverPageTitle");

                    b.Property<string>("CoverPageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("coverPageType");

                    b.Property<string>("CoverPageTypeUnit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("coverPageTypeUnit");

                    b.Property<int?>("FinancialReportId")
                        .HasColumnType("int");

                    b.Property<string>("FundName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("fundName");

                    b.Property<string>("LeiCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("leiCode");

                    b.Property<string>("PeriodFrom")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("periodFrom");

                    b.Property<string>("PeriodTo")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("periodTo");

                    b.Property<DateOnly?>("PreparationDate")
                        .HasColumnType("date")
                        .HasColumnName("preparationDate");

                    b.Property<string>("PreviousPeriodFrom")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("previousPeriodFrom");

                    b.Property<string>("PreviousPeriodTo")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("previousPeriodTo");

                    b.HasKey("Id")
                        .HasName("PK_dbo_ReportContents");

                    b.HasIndex("FinancialReportId");

                    b.ToTable("ReportContent");
                });

            modelBuilder.Entity("FsDataAccess.Models.ReportTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Data")
                        .HasColumnType("money")
                        .HasColumnName("data");

                    b.Property<int?>("FinancialReportId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_dbo_ReportTables");

                    b.HasIndex("FinancialReportId");

                    b.ToTable("ReportTable");
                });

            modelBuilder.Entity("FsDataAccess.Models.SkNace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleEng")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleSk")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK_staging_SkNace");

                    b.ToTable("SkNace", "staging");
                });

            modelBuilder.Entity("FsDataAccess.Models.TemplateHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ColumnPosition")
                        .HasColumnType("int")
                        .HasColumnName("columnPosition");

                    b.Property<int?>("ColumnSpan")
                        .HasColumnType("int")
                        .HasColumnName("columnSpan");

                    b.Property<int?>("RowPosition")
                        .HasColumnType("int")
                        .HasColumnName("rowPosition");

                    b.Property<int?>("RowSpan")
                        .HasColumnType("int")
                        .HasColumnName("rowSpan");

                    b.Property<int?>("TemplateTableId")
                        .HasColumnType("int");

                    b.Property<string>("TextEn")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("textEn");

                    b.Property<string>("TextSk")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("textSk");

                    b.HasKey("Id")
                        .HasName("PK_dbo_TemplateHeaders");

                    b.HasIndex("TemplateTableId");

                    b.ToTable("TemplateHeader");
                });

            modelBuilder.Entity("FsDataAccess.Models.TemplateRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("code");

                    b.Property<string>("DescriptionEn")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("descriptionEn");

                    b.Property<string>("DescriptionSk")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("descriptionSk");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("int")
                        .HasColumnName("rowNumber");

                    b.Property<int?>("TemplateTableId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo_TemplateRows");

                    b.HasIndex("TemplateTableId");

                    b.ToTable("TemplateRow");
                });

            modelBuilder.Entity("FsDataAccess.Models.TemplateTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FinancialReportTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nameEn");

                    b.Property<string>("NameSk")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nameSk");

                    b.Property<int?>("NumberOfColumns")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfDataColumns")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo_TemplateTables");

                    b.HasIndex("FinancialReportTemplateId");

                    b.ToTable("TemplateTable");
                });

            modelBuilder.Entity("AccountingEntitiesAnnualReport", b =>
                {
                    b.HasOne("FsDataAccess.Models.AccountingEntity", null)
                        .WithMany()
                        .HasForeignKey("AccountingEntityId")
                        .IsRequired()
                        .HasConstraintName("FK__Accountin__Accou__5A1A5A11");

                    b.HasOne("FsDataAccess.Models.AnnualReport", null)
                        .WithMany()
                        .HasForeignKey("AnnualReportId")
                        .IsRequired()
                        .HasConstraintName("FK__Accountin__Annua__5B0E7E4A");
                });

            modelBuilder.Entity("AccountingEntitiesFinancialStatement", b =>
                {
                    b.HasOne("FsDataAccess.Models.AccountingEntity", null)
                        .WithMany()
                        .HasForeignKey("AccountingEntityId")
                        .IsRequired()
                        .HasConstraintName("FK__Accountin__Accou__5649C92D");

                    b.HasOne("FsDataAccess.Models.FinancialStatement", null)
                        .WithMany()
                        .HasForeignKey("FinancialStatementId")
                        .IsRequired()
                        .HasConstraintName("FK__Accountin__Finan__573DED66");
                });

            modelBuilder.Entity("FsDataAccess.Models.AnnualReportAttachment", b =>
                {
                    b.HasOne("FsDataAccess.Models.AnnualReport", "AnnualReport")
                        .WithMany("AnnualReportAttachments")
                        .HasForeignKey("AnnualReportId")
                        .HasConstraintName("FK__AnnualRep__Annua__48EFCE0F");

                    b.Navigation("AnnualReport");
                });

            modelBuilder.Entity("FsDataAccess.Models.Attachment", b =>
                {
                    b.HasOne("FsDataAccess.Models.FinancialReport", "FinancialReport")
                        .WithMany("Attachments")
                        .HasForeignKey("FinancialReportId")
                        .HasConstraintName("FK__Attachmen__Finan__405A880E");

                    b.Navigation("FinancialReport");
                });

            modelBuilder.Entity("FsDataAccess.Models.FinancialReport", b =>
                {
                    b.HasOne("FsDataAccess.Models.AnnualReport", "AnnualReport")
                        .WithMany("FinancialReports")
                        .HasForeignKey("AnnualReportId")
                        .HasConstraintName("FK__Financial__Annua__3D7E1B63");

                    b.HasOne("FsDataAccess.Models.FinancialStatement", "FinancialStatement")
                        .WithMany("FinancialReports")
                        .HasForeignKey("FinancialStatementId")
                        .HasConstraintName("FK__Financial__Finan__3C89F72A");

                    b.Navigation("AnnualReport");

                    b.Navigation("FinancialStatement");
                });

            modelBuilder.Entity("FsDataAccess.Models.FinancialStatement", b =>
                {
                    b.HasOne("FsDataAccess.Models.AccountingEntity", "AccountingEntity")
                        .WithMany("FinancialStatementsNavigation")
                        .HasForeignKey("AccountingEntityId")
                        .HasConstraintName("FK__Financial__Accou__37C5420D");

                    b.Navigation("AccountingEntity");
                });

            modelBuilder.Entity("FsDataAccess.Models.ReportContent", b =>
                {
                    b.HasOne("FsDataAccess.Models.FinancialReport", "FinancialReport")
                        .WithMany("ReportContents")
                        .HasForeignKey("FinancialReportId")
                        .HasConstraintName("FK__ReportCon__Finan__4336F4B9");

                    b.Navigation("FinancialReport");
                });

            modelBuilder.Entity("FsDataAccess.Models.ReportTable", b =>
                {
                    b.HasOne("FsDataAccess.Models.FinancialReport", "FinancialReport")
                        .WithMany("ReportTables")
                        .HasForeignKey("FinancialReportId")
                        .HasConstraintName("FK__ReportTab__Finan__46136164");

                    b.Navigation("FinancialReport");
                });

            modelBuilder.Entity("FsDataAccess.Models.TemplateHeader", b =>
                {
                    b.HasOne("FsDataAccess.Models.TemplateTable", "TemplateTable")
                        .WithMany("TemplateHeaders")
                        .HasForeignKey("TemplateTableId")
                        .HasConstraintName("FK__TemplateH__Templ__5090EFD7");

                    b.Navigation("TemplateTable");
                });

            modelBuilder.Entity("FsDataAccess.Models.TemplateRow", b =>
                {
                    b.HasOne("FsDataAccess.Models.TemplateTable", "TemplateTable")
                        .WithMany("TemplateRows")
                        .HasForeignKey("TemplateTableId")
                        .HasConstraintName("FK__TemplateR__Templ__536D5C82");

                    b.Navigation("TemplateTable");
                });

            modelBuilder.Entity("FsDataAccess.Models.TemplateTable", b =>
                {
                    b.HasOne("FsDataAccess.Models.FinancialReportTemplate", "FinancialReportTemplate")
                        .WithMany("TemplateTables")
                        .HasForeignKey("FinancialReportTemplateId")
                        .HasConstraintName("FK__TemplateT__Finan__4DB4832C");

                    b.Navigation("FinancialReportTemplate");
                });

            modelBuilder.Entity("FsDataAccess.Models.AccountingEntity", b =>
                {
                    b.Navigation("FinancialStatementsNavigation");
                });

            modelBuilder.Entity("FsDataAccess.Models.AnnualReport", b =>
                {
                    b.Navigation("AnnualReportAttachments");

                    b.Navigation("FinancialReports");
                });

            modelBuilder.Entity("FsDataAccess.Models.FinancialReport", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ReportContents");

                    b.Navigation("ReportTables");
                });

            modelBuilder.Entity("FsDataAccess.Models.FinancialReportTemplate", b =>
                {
                    b.Navigation("TemplateTables");
                });

            modelBuilder.Entity("FsDataAccess.Models.FinancialStatement", b =>
                {
                    b.Navigation("FinancialReports");
                });

            modelBuilder.Entity("FsDataAccess.Models.TemplateTable", b =>
                {
                    b.Navigation("TemplateHeaders");

                    b.Navigation("TemplateRows");
                });
#pragma warning restore 612, 618
        }
    }
}
